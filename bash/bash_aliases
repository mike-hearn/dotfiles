#!/bin/bash
#
# Aliases & functions for various apps
#

# ----------------------------------------------------------------------
#  git
# ----------------------------------------------------------------------

alias gs="git status "
alias ga="git add "
alias gaa="git add --all"
alias gb="git branch "
alias gc="git commit"
alias gd="git diff"
alias gco="git checkout "
alias gk="gitk --all&"
alias gx="gitx --all"
alias got="git "
alias get="git "
alias gci="git ci"
alias gbr="git for-each-ref --sort=-committerdate refs/remotes/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"
alias grb="git for-each-ref --sort=-committerdate refs/remotes/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"
alias recent="git for-each-ref --sort=-committerdate"
alias recentdate="git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname) %(committerdate) %(authorname)' | sed 's/refs\/heads\///g'"

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

# ----------------------------------------------------------------------
#  Docker container service/util aliases
# ----------------------------------------------------------------------
function tldr { docker run --rm mikehearn/tldr $@; }
function hugo { docker run --rm -v $(pwd):/data mikehearn/hugo $@; }
function gcloud { mkdir -p $HOME/.config/gcloud; docker run --rm -ti -v $HOME/.config/gcloud:/home/gcloud/.config/gcloud mikehearn/gcloud $@; }

# ----------------------------------------------------------------------
#  ffmpeg
# ----------------------------------------------------------------------

# Split MP4 files
ffsplit () { ffmpeg -i "$1" -f segment -segment_time 0.001 -vcodec copy -an -sn -y -reset_timestamps 1 -map 0 "$1.%04d.mp4"; }

# Use ffmpeg to create a GIF
palette="/tmp/palette.png"
filters="scale=${2-400}:-1:flags=lanczos"
Ffmpeggif () {
    ffmpeg -v warning -i "$1" -vf "$filters,palettegen" -y $palette
    ffmpeg -v warning -i "$1" -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y "$1.gif"
}

# Convert file to WebM
toWebM () { ffmpeg -i "$1" -c:v libvpx -crf 10 -b:v 20M -c:a libvorbis "$1.$(date +%H%M%S%d%m%y).webm"; }

# Convert file to MP4
toMP4 () { ffmpeg -i "$1" -crf 17 -vf "scale=trunc(in_w/2)*2:trunc(in_h/2)*2" -pix_fmt yuv420p "$1.$(date +%H%M%S%d%m%y).mp4"; }

# Convert video into smooth 60fps... OR 24fps
smooth() { vspipe --arg in_filename="$1" --arg display_fps=60 --y4m ~/.mpv/60fps.py - | ffmpeg -i - -crf 17 -y "$1.$(date +%H%M%S%d%m%y).60fps.mp4"; }
to24fps() { vspipe --arg in_filename="$1" --arg display_fps=24 --y4m ~/.mpv/60fps.py - | ffmpeg -i - -crf 17 -y "$1.$(date +%H%M%S%d%m%y).24fps.mp4"; }

stable() {
    ffmpeg -i "$1" -vf vidstabdetect=stepsize=12:result=transform_vectors.trf -f null -;
    ffmpeg -i "$1" -vf vidstabtransform=input=transform_vectors.trf:zoom=1:smoothing=30,unsharp=5:5:0.8:3:3:0.4 -vcodec libx264 -preset slow -tune film -crf 18 -acodec copy "$1.stable.mp4"; }

deshake() {
    ffmpeg -i "$1" -vf vidstabdetect=shakiness=10:accuracy=15:result="/tmp/mytransforms.trf" -f null -
    ffmpeg -i "$1" -vf vidstabtransform=zoom=15:smoothing=30:input="/tmp/mytransforms.trf",unsharp=5:5:0.8:3:3:0.4 -crf 16 -y "$1.deshake.mp4"
}


# ----------------------------------------------------------------------
#  Miscellany
# ----------------------------------------------------------------------

# Quick find
f () {
    find . -iname "*$1*"
}

# cd to directory, or if file, to containing dir
cf () {
    if [[ -e $1 ]]; then
        if [[ -d $1 ]]; then
            cd $1
        else
            cd $(dirname $1)
        fi
    fi
}

# Read things aloud faster
alias say="say --voice=Daniel --rate=275"

# Quick commands
alias c='clear'
alias x='exit'
alias v='vim'

# Find external IP address
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"

# tmux with reasonable colors
alias tmux="TERM=screen-256color-bce tmux"

# tmux fzf session switch
fs() {
    local session
    session=$(tmux list-sessions -F "#{session_id} #{session_name}" | sort -r | \
        sed 's/\$\([0-9]\)/\1/g' | \
        fzf --query="$1" --select-1 --exit-0) &&
        tmux switch-client -t "`echo $session | sed 's/^[0-9]* //g'`"
}

# fzf
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
export FZF_CTRL_R_OPTS='--sort'
export FZF_DEFAULT_COMMAND='ag -g ""'
_fzf_compgen_path() {
    ag -g "" "$1"
}

# sagent
sagent()
{
    [ -S "$SSH_AUTH_SOCK" ] || export SSH_AUTH_SOCK="$(< ~/.ssh/ssh-agent.env)"

    # if cached agent socket is invalid, start a new one
    [ -S "$SSH_AUTH_SOCK" ] || {
        eval "$(ssh-agent)"
        ssh-add -t 25920000 -K ~/.ssh/id_rsa
        echo "$SSH_AUTH_SOCK" > ~/.ssh/ssh-agent.env
    }
}

# Generate git branch for shell PS1 integration
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# vim:syntax=sh
