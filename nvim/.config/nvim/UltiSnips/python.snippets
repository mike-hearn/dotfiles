# Python Snippets

# {{{ General Python Snippets

snippet pydef "Create a basic Python definition or method" b
def $1(self):
	"""
	${2:Enter method description here}
	"""
	pass

endsnippet

# }}}
# {{{ Django Snippets

snippet djmodel "Create a basic Django model" b
class $1(models.Model):
	title = models.CharField(max_length=200)

	def __str__(self):
		return self.title


endsnippet

snippet djserializer  "Create a Django Rest Framework serializer" b
from rest_framework import serializers


class $1Serializer(serializers.ModelSerializer):
	class Meta:
		model = $1


endsnippet

snippet djviewset  "Create a Django Rest Framework ModelViewSet" b
from rest_framework import viewsets


class $1ViewSet(viewsets.ModelViewSet):
	queryset = $1.objects.all()
	serializer_class = $1Serializer

endsnippet

snippet djadmin "Create a basic ModelAdmin class and register it" b
@admin.register($1)
class $1Admin(admin.ModelAdmin):
	pass
endsnippet

snippet djstr "Set the __str__ function" b
def __str__(self):
	return self.$0
endsnippet

snippet djmanagementcommand "Sample Django management command boilerplate" b
from django.core.management.base import BaseCommand, CommandError

class Command(BaseCommand):
	help = 'Closes the specified poll for voting'

	def add_arguments(self, parser):
		# Positional arguments
		parser.add_argument('poll_id', nargs='+', type=int)

		# Named (optional) arguments
		parser.add_argument(
			'--delete',
			action='store_true',
			dest='delete',
			default=False,
			help='Delete poll instead of closing it',
		)


	def handle(self, *args, **options):
		for poll_id in options['poll_id']:
			try:
				poll = Poll.objects.get(pk=poll_id)
			except Poll.DoesNotExist:
				raise CommandError('Poll "%s" does not exist' % poll_id)

			poll.opened = False
			poll.save()

			self.stdout.write(self.style.SUCCESS('Successfully closed poll "%s"' % poll_id))
endsnippet

# }}}

# vim: foldmethod=marker: foldlevel=0
